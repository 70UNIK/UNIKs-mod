[manifest]
version = "0.0.1"
dump_lua = true
priority = 99999

### Display exponential blind amount
## exponent is 'unik_exponent' for compat with entropy

[[patches]]
[patches.pattern]
target = "blind.lua"
pattern = '''self.chips = get_blind_amount(G.GAME.round_resets.ante)*self.mult*G.GAME.starting_params.ante_scaling'''
position = "before"
payload = '''
if ((not self.unik_exponent) or self.unik_exponent[2] <= 0) and ((not self.high_score_size))then
'''
match_indent = true

[[patches]]
[patches.pattern]
target = "blind.lua"
pattern = '''self.mult = blind and blind.mult or 0'''
position = "after"
payload = '''
self.unik_exponent = blind and blind.unik_exponent or {1,0}
self.death_message = blind and blind.death_message or nil
self.high_score_size = blind and blind.high_score_size or nil
self.glitchy_anim = blind and blind.glitchy_anim or nil
'''
match_indent = true

[[patches]]
[patches.pattern]
target = "blind.lua"
pattern = '''self.chips = get_blind_amount(G.GAME.round_resets.ante)*self.mult*G.GAME.starting_params.ante_scaling'''
position = "after"
payload = '''
elseif self.unik_exponent[2] > 0 then
    local initial = get_blind_amount(G.GAME.round_resets.ante)*G.GAME.starting_params.ante_scaling
    initial = portable_exp(initial,self.unik_exponent[1], self.unik_exponent[2])
    self.chips = initial
elseif self.high_score_size then
    self.chips = G.GAME.round_scores['hand'].amt or 0
end
'''
match_indent = true

### display exponential blind 3
[[patches]]
[patches.pattern]
target = "functions/UI_definitions.lua"
pattern = '''local blind_amt = get_blind_amount(G.GAME.round_resets.blind_ante)*blind_choice.config.mult*G.GAME.starting_params.ante_scaling'''
position = "after"
payload = '''
if blind_choice.config.unik_exponent then
      local initial = get_blind_amount(G.GAME.round_resets.ante)*G.GAME.starting_params.ante_scaling
      initial = portable_exp(initial,blind_choice.config.unik_exponent[1], blind_choice.config.unik_exponent[2])
      blind_amt = initial
elseif blind_choice.config.high_score_size then
    blind_amt = G.GAME.round_scores['hand'].amt or 0
end
'''
match_indent = true


### regex to inject 
[[patches]]
[patches.regex]
target = "functions/UI_definitions.lua"
pattern = '''\{n\=G\.UIT\.T\, config\=\{text \= (.*)\, scale \= 0\.4\, colour = G\.C\.RED\}\}'''
position = "before"
payload = '''
 UNIK.custom_base_size(blind,discovered,vars) or 
'''