[manifest]
version = "0.0.1"
dump_lua = true
priority = 9999

### Bigger Blind and Boring Blank functionality to emulate Small and Big Blinds in appearance and functionality, while still ""bosses""
### And also make them ineligable for reroll (but can appear naturally) and not enable chicot/luchador to function

### Bigger blind colors
[[patches]]
[patches.pattern]
target = "functions/common_events.lua"
pattern = '''elseif blindname == 'Small Blind' or blindname == 'Big Blind' or blindname == '' then'''
position = "before"
payload = '''
elseif blindname == 'bl_unik_bigger_blind' or blindname == 'bl_unik_boring_blank' then
    ease_background_colour{new_colour = G.C.BLIND['Small'], contrast = 1}
'''
match_indent = true

[[patches]]
[patches.pattern]
target = "functions/common_events.lua"
pattern = '''elseif G.GAME.won then 
        ease_background_colour{new_colour = G.C.BLIND.won, contrast = 1}'''
position = "after"
payload = '''
elseif blindname == 'bl_unik_bigger_blind' or blindname == 'bl_unik_boring_blank' then
    ease_background_colour{new_colour = G.C.BLIND['Small'], contrast = 1}
'''
match_indent = true

##Ease ante when defeating bigger/boss blinds
[[patches]]
[patches.regex]
target = 'functions/state_events.lua'
pattern = '''G\.GAME\.blind\:get\_type\(\) \=\= \'Boss\''''
position = "at"
line_prepend = '$indent'
payload = '''(G.GAME.blind_on_deck == 'Boss') '''

# Rush Hour - mark small blind as defeated
[[patches]]
[patches.pattern]
target = "functions/state_events.lua"
pattern = "if G.GAME.round_resets.blind == G.P_BLINDS.bl_small then"
position = "at"
payload = "if G.GAME.blind_on_deck == 'Small' then"
match_indent = true

# Ruby Stake - mark big blind as defeated
[[patches]]
[patches.pattern]
target = "functions/state_events.lua"
pattern = "elseif G.GAME.round_resets.blind == G.P_BLINDS.bl_big then"
position = "at"
payload = "elseif G.GAME.blind_on_deck == 'Big' then"
match_indent = true

# MoreFluff fix
[[patches]]
[patches.pattern]
target = "functions/state_events.lua"
pattern = '''elseif G.GAME.superboss_active and 
  (G.GAME.blind:get_type() == 'Boss' and not G.GAME.blind.debuff.superboss and G.GAME.blind.debuff.akyrs_blind_difficulty ~= "expert") then
    G.GAME.round_resets.blind_states.Big = 'Defeated''''
position = "at"
payload = '''--nope'''
match_indent = true

[[patches]]
[patches.pattern]
target = "functions/common_events.lua"
pattern = '''G.GAME.bosses_used[boss] = G.GAME.bosses_used[boss] + 1'''
position = "before"
payload = '''
if boss then
'''
match_indent = true

[[patches]]
[patches.pattern]
target = "functions/common_events.lua"
pattern = '''G.GAME.bosses_used[boss] = G.GAME.bosses_used[boss] + 1'''
position = "after"
payload = '''
else --fallback
    boss = 'bl_hook'
end
'''
match_indent = true

[[patches]]
[patches.regex]
target = "functions/state_events.lua"
pattern = '''G\.GAME\.round\_resets\.ante \=\= G\.GAME\.win\_ante'''
position = "at"
payload = '''G.GAME.round_resets.ante >= G.GAME.win_ante'''