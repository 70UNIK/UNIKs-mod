[manifest]
version = "0.0.1"
dump_lua = true
priority = 999


[[patches]]
[patches.pattern]
target = '''=[SMODS Bunco "Bunco.lua"]'''
pattern = '''local bunc_original_add_to_highlighted = CardArea.add_to_highlighted
function CardArea:add_to_highlighted(card, silent)
    if G.STATE ~= G.STATES.DRAW_TO_HAND and not G.DRAWING_CARDS then
        local original_highlited_limit = self.config.highlighted_limit
        self.config.highlighted_limit = G.GAME.THE_8_BYPASS and self.config.type == "hand" and math.huge or self.config.highlighted_limit

        if card.ability.group and self then
            local group = {}
            for i = 1, #self.cards do
                if self.cards[i].ability.group
                and self.cards[i].ability.group.id == card.ability.group.id then
                    if self.config.type == 'hand' and not self.cards[i].highlighted and not (card ~= self.cards[i] and self.cards[i].edition and self.cards[i].edition.bunc_fluorescent) then
                        table.insert(group, self.cards[i])
                    end
                end
            end
            for i = 1, #group do
                if i ~= #group then
                    self.highlighted[#self.highlighted+1] = group[i]
                    group[i].highlighted = true

                    -- The Gate fix

                    if G.GAME.blind and G.GAME.blind.name == 'bl_bunc_gate' and not G.GAME.blind.disabled and self == G.hand then
                        group[i].ability.forced_selection = true
                    end

                else
                    bunc_original_add_to_highlighted(self, group[i], (silent == nil) and false or silent)
                end
            end
        else
            bunc_original_add_to_highlighted(self, card, silent)
        end

        self.config.highlighted_limit = original_highlited_limit
    end
end'''
position = "at"
payload = '''
--NOPE!
'''
match_indent = true
[[patches]]
[patches.pattern]
target = '''=[SMODS Bunco "Bunco.lua"]'''
pattern = '''local bunc_original_remove_from_highlighted = CardArea.remove_from_highlighted
function CardArea:remove_from_highlighted(card, force)
    if card.ability.group and self and not force then
        local group = {}
        for i = 1, #self.cards do
            if self.config.type == 'hand'
            and self.cards[i].ability.group
            and self.cards[i].ability.group.id == card.ability.group.id then
                table.insert(group, self.cards[i])
            end
        end
        for i = 1, #group do
            for index, highligthed in ipairs(self.highlighted) do
                if highligthed == group[i] then
                    table.remove(self.highlighted, index)
                end
            end
            group[i].highlighted = false
            if i == #group then
                bunc_original_remove_from_highlighted(self, group[i], force)
            end
        end
    else
        bunc_original_remove_from_highlighted(self, card, force)
    end
end'''
position = "at"
payload = '''
--NOPE!
'''
match_indent = true

###Cracker card fixes
[[patches]]
[patches.pattern]
target = '''functions/state_events.lua'''
pattern = '''G.hand:add_to_highlighted(G.hand.crackers_highlighted[i], true)'''
position = "at"
payload = '''
--Brute force highlight if already selected within polyminos
G.hand:brute_force_highlight(G.hand.crackers_highlighted[i])
'''
match_indent = true


##not related to polys but fixes astigmatism
[[patches]]
[patches.pattern]
target = '''=[SMODS Bunco "Bunco.lua"]'''
pattern = '''BUNCOMOD.funcs.astigmatism_check = function (card, suit)
    if not next(SMODS.find_card('j_bunc_myopia')) then'''
position = "at"
payload = '''
BUNCOMOD.funcs.astigmatism_check = function (card, suit)
    if not next(SMODS.find_card('j_bunc_astigmatism')) then
'''
match_indent = true

# Linked cards saving (experimental)
[[patches]]
[patches.pattern]
target = 'functions/common_events.lua'
pattern = '''G.E_MANAGER:add_event(Event({blocking = false, trigger = 'after', func = function()
    if card and card.ability and card.ability.group then
        save_run()
    end
    return true
end}))'''
position = 'at'
match_indent = true
payload = '''

G.E_MANAGER:add_event(Event({blocking = false, trigger = 'after', func = function()
    --avoid major polymino save softlock
    if card and card.ability and card.ability.group and G.STATE ~= G.STATES.HAND_PLAYED then
        save_run()
    end
    return true
end}))

'''